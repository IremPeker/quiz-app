{"version":3,"sources":["assets/game.png","assets/fail.webp","assets/celebrate.webp","assets/try-again.webp","utils/dataUtils.js","utils/stringUtils.js","components/App.jsx","utils/apiUtils.js","components/HomeContainer.jsx","utils/arrayUtils.js","components/Score.jsx","components/reusables/GoBackHome.jsx","components/GameInformation.jsx","components/PlayContainer.jsx","components/ErrorContainer.jsx","components/EndGame.jsx","serviceWorker.js","index.js"],"names":["module","exports","decodeEntities","str","DOMParser","parseFromString","documentElement","textContent","App","allQuestions","setAllQuestions","useState","numberOfQuestions","setNumberOfQuestions","score","setScore","correctAnswers","setCorrectAnswers","wrongAnswers","setWrongAnswers","error","setError","category","setCategory","difficulty","setDifficulty","useEffect","length","categoryNumber","Math","floor","random","getRandomDifficulty","difficulties","async","url","response","fetch","ok","Error","json","console","fetchData","then","data","results","decodedCategory","catch","React","createElement","Fragment","SnackbarProvider","autoHideDuration","anchorOrigin","vertical","horizontal","Outlet","context","handleEndGame","HomeContainer","useOutletContext","id","className","src","game","alt","Link","to","PulseLoader","color","size","shuffleAnswers","correctAnswer","incorrectAnswers","randomIndex","arr","slice","concat","Score","data-testid","GoBackHome","onClick","GameInformation","_ref","PlayContainer","enqueueSnackbar","useSnackbar","isLoading","setIsLoading","currentOptions","setCurrentOptions","setCorrectAnswer","currentQuestionIndex","setCurrentQuestionIndex","currentQuestion","setCurrentQuestion","numberOfAnsweredQuestions","setNumberOfAnsweredQuestions","selectedOption","setSelectedOption","showButton","setShowButton","question","incorrect_answers","correct_answer","shuffledAnswers","map","answer","setTimeout","handleOptionClick","useCallback","option","variant","optionItem","useMemo","index","decodedOption","key","disabled","prevIndex","ErrorContainer","fail","EndGame","celebrate","tryAgain","Boolean","window","location","hostname","match","router","createBrowserRouter","path","element","errorElement","children","basename","future","v7_startTransition","v7_relativeSplatPath","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_skipActionErrorRevalidation","ReactDOM","createRoot","document","getElementById","render","StrictMode","RouterProvider","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.df688f83.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/game.9a0db46e.png\";","module.exports = __webpack_public_path__ + \"static/media/fail.e3c65c50.webp\";","module.exports = __webpack_public_path__ + \"static/media/celebrate.4ccc92bf.webp\";","module.exports = __webpack_public_path__ + \"static/media/try-again.73380154.webp\";","export const fetchData = async (category, difficulty) => {\n  const url = `https://opentdb.com/api.php?amount=10&category=${category}&difficulty=${difficulty}&type=multiple`;\n\n  try {\n    const response = await fetch(url);\n\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error during fetch:\", error);\n    return null;\n  }\n};\n","export const decodeEntities = (str) => {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(str, 'text/html');\n  return doc.documentElement.textContent;\n}","import React, { useEffect, useState } from \"react\";\nimport { Outlet } from \"react-router-dom\";\nimport { fetchData } from \"../utils/dataUtils\";\nimport { getRandomCategory, getRandomDifficulty } from \"../utils/apiUtils\";\nimport { decodeEntities } from \"../utils/stringUtils\";\nimport { SnackbarProvider } from \"notistack\";\nimport \"../styles/App.scss\";\n\nconst App = () => {\n  const [allQuestions, setAllQuestions] = useState([]);\n  const [numberOfQuestions, setNumberOfQuestions] = useState(0);\n  const [score, setScore] = useState(0);\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [wrongAnswers, setWrongAnswers] = useState(0);\n  const [error, setError] = useState(false);\n  const [category, setCategory] = useState(\"\");\n  const [difficulty, setDifficulty] = useState(\"\");\n\n  useEffect(() => {\n    if (!allQuestions.length) {\n      const categoryNumber = getRandomCategory();\n      const difficulty = getRandomDifficulty();\n      setDifficulty(difficulty);\n      fetchData(categoryNumber, difficulty)\n        .then((data) => {\n          setAllQuestions(data.results);\n          setNumberOfQuestions(data.results.length);\n          const decodedCategory = decodeEntities(data.results[0].category);\n          setCategory(decodedCategory);\n        })\n        .catch((error) => {\n          setError(true);\n        });\n    }\n  }, [allQuestions.length]);\n\n  const handleEndGame = () => {\n    setAllQuestions([]);\n    setScore(0);\n    setCorrectAnswers(0);\n    setWrongAnswers(0);\n  };\n\n  return (\n    <>\n      <SnackbarProvider\n        autoHideDuration={2000}\n        anchorOrigin={{\n          vertical: \"top\",\n          horizontal: \"right\",\n        }}>\n        <Outlet\n          context={{\n            allQuestions,\n            numberOfQuestions,\n            category,\n            difficulty,\n            score,\n            setScore,\n            correctAnswers,\n            setCorrectAnswers,\n            wrongAnswers,\n            setWrongAnswers,\n            error,\n            handleEndGame,\n          }}\n        />\n      </SnackbarProvider>\n    </>\n  );\n};\n\nexport default App;\n","export const getRandomCategory = () => {\n  const min = 9;\n  const max = 32;\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nexport const getRandomDifficulty = () => {\n  const difficulties = [\"easy\", \"medium\", \"hard\"];\n  return difficulties[Math.floor(Math.random() * difficulties.length)];\n};\n","import React from \"react\";\nimport { Link, useOutletContext } from \"react-router-dom\";\nimport PulseLoader from \"react-spinners/PulseLoader\";\nimport game from \"../assets/game.png\";\n\nconst HomeContainer = () => {\n  const { allQuestions } = useOutletContext();\n\n  return (\n    <div id=\"home\">\n      <div className=\"home-section\">\n        <h1>Quiz Game</h1>\n        <div className=\"instructions\">\n          <p className=\"title\">\n            Each game has 10 questions.\n            <br /> The category of question can vary from General Knowledge to\n            Films, Musics and even Anime Charachters.\n            <br /> The difficulty can be easy, medium or hard.\n            <br /> Each question has 4 options. The questions look like this:{\" \"}\n          </p>\n          <img\n            src={game}\n            className=\"game-screenshot\"\n            alt=\"example screenshot\"></img>\n          <p className=\"title\">\n            Take your time! There is no time pressure :)\n            <br />\n            Click on \"Start Game\" and Enjoy!\n          </p>\n        </div>\n        {allQuestions.length > 0 ? (\n          <div className=\"play-button-container\">\n            <Link to=\"/play\" className=\"play-button\">\n              Start Game\n            </Link>\n          </div>\n        ) : (\n          <PulseLoader color=\"#ffff\" size={50} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default HomeContainer;\n","export const getRandomIndex = (arr) => {\n  return Math.floor(Math.random() * arr.length + 1);\n};\n\nexport const shuffleAnswers = (correctAnswer, incorrectAnswers) => {\n  const randomIndex = getRandomIndex(incorrectAnswers);\n  return incorrectAnswers\n    .slice(0, randomIndex)\n    .concat(correctAnswer, incorrectAnswers.slice(randomIndex));\n};\n","import React from \"react\";\nimport { useOutletContext } from \"react-router-dom\";\n\nconst Score = () => {\n  const { correctAnswers, wrongAnswers } = useOutletContext();\n  return (\n    <div data-testid=\"scoreContainer\" className=\"score-container\">\n      <div data-testid=\"scoreCorrect\" className=\"number-wrapper\">\n        <p className=\"title\">Correct Answers:</p>\n        <p className=\"score-correct-number\">{correctAnswers}</p>\n      </div>\n      <div data-testid=\"scoreWrong\" className=\"number-wrapper\">\n        <p className=\"title\">Wrong Answers:</p>\n        <p className=\"score-wrong-number\">{wrongAnswers}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Score;\n","import React from \"react\";\nimport { Link, useOutletContext } from \"react-router-dom\";\n\nconst GoBackHome = () => {\n  const { handleEndGame } = useOutletContext();\n  return (\n    <div className=\"back-home-button-container\">\n      <Link to=\"/\" className=\"back-home-button\" onClick={handleEndGame}>\n        Home Page\n      </Link>\n    </div>\n  );\n};\n\nexport default GoBackHome;\n","import React from \"react\";\n\nconst GameInformation = ({ category, difficulty }) => {\n  return (\n    <div className=\"game-information\">\n      <div className=\"game-information-item\">\n        <p className=\"title\">Category:</p>\n        <p className=\"category\">{category}</p>\n      </div>\n      <div className=\"game-information-item\">\n        <p className=\"title\">Difficulty:</p>\n        <p className=\"difficulty\">{difficulty}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default GameInformation;\n","import React, { useEffect, useState, useMemo, useCallback } from \"react\";\nimport { Link, useOutletContext } from \"react-router-dom\";\nimport { decodeEntities } from \"../utils/stringUtils\";\nimport { shuffleAnswers } from \"../utils/arrayUtils\";\nimport PulseLoader from \"react-spinners/PulseLoader\";\nimport { useSnackbar } from \"notistack\";\nimport Score from \"./Score\";\nimport GoBackHome from \"./reusables/GoBackHome\";\nimport GameInformation from \"./GameInformation\";\n\nconst PlayContainer = () => {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const {\n    allQuestions,\n    numberOfQuestions,\n    category,\n    difficulty,\n    score,\n    setScore,\n    correctAnswers,\n    wrongAnswers,\n    setCorrectAnswers,\n    setWrongAnswers,\n  } = useOutletContext();\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [currentOptions, setCurrentOptions] = useState([]);\n  const [correctAnswer, setCorrectAnswer] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [numberOfAnsweredQuestions, setNumberOfAnsweredQuestions] = useState(0);\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [showButton, setShowButton] = useState(false);\n\n  useEffect(() => {\n    if (allQuestions.length > 0) {\n      setIsLoading(false);\n\n      const currentQuestion = allQuestions[currentQuestionIndex].question;\n      setCurrentQuestion(decodeEntities(currentQuestion));\n\n      // incorrect answers array\n      const incorrectAnswers =\n        allQuestions[currentQuestionIndex].incorrect_answers;\n      // correct answer\n      const correctAnswer = allQuestions[currentQuestionIndex].correct_answer;\n      setCorrectAnswer(correctAnswer);\n\n      //concat and shuffle answers\n      const shuffledAnswers = shuffleAnswers(correctAnswer, incorrectAnswers);\n      setCurrentOptions(\n        shuffledAnswers.map((answer) => decodeEntities(answer))\n      );\n    }\n  }, [allQuestions, currentQuestionIndex]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShowButton(true);\n    }, 5000);\n  }, []);\n\n  const handleOptionClick = useCallback(\n    (option) => {\n      setSelectedOption(option);\n      if (option === correctAnswer) {\n        setScore(score + 1);\n        setCorrectAnswers(correctAnswers + 1);\n        setNumberOfAnsweredQuestions(numberOfAnsweredQuestions + 1);\n        enqueueSnackbar(\"Correct Answer!\", { variant: \"success\" });\n      } else {\n        setWrongAnswers(wrongAnswers + 1);\n        setNumberOfAnsweredQuestions(numberOfAnsweredQuestions + 1);\n        enqueueSnackbar(\"Wrong Answer!\", { variant: \"error\" });\n      }\n    },\n    [\n      correctAnswer,\n      score,\n      correctAnswers,\n      wrongAnswers,\n      numberOfAnsweredQuestions,\n      enqueueSnackbar,\n    ]\n  );\n\n  const handleButtonClick = () => {\n    setCurrentQuestionIndex((prevIndex) => prevIndex + 1);\n    setCurrentQuestion(allQuestions[currentQuestionIndex].question);\n    setSelectedOption(null);\n  };\n\n  const optionItem = useMemo(() => {\n    return currentOptions.map((option, index) => {\n      const decodedOption = decodeEntities(option);\n      return (\n        <button\n          key={index}\n          data-testid=\"option\"\n          onClick={() => handleOptionClick(option)}\n          className={\n            selectedOption && selectedOption === decodedOption\n              ? \"option not-clickable\"\n              : \"option\"\n          }\n          disabled={selectedOption && selectedOption !== decodedOption}>\n          {decodedOption}\n        </button>\n      );\n    });\n  }, [currentOptions, selectedOption]);\n\n  return isLoading ? (\n    <div data-testid=\"loaderContainer\" id=\"loader\" className=\"loader-container\">\n      <PulseLoader color=\"#ffff\" size={50} />\n      {showButton && (\n        <div data-testid=\"goBackMessage\" className=\"go-back-message\">\n          <h3>Took too long to load? :(</h3>\n          <GoBackHome />\n        </div>\n      )}\n    </div>\n  ) : (\n    <div id=\"play\">\n      <div className=\"play-section\">\n        <GameInformation category={category} difficulty={difficulty} />\n        <Score />\n        <div className=\"questions\">\n          <p data-testid=\"question\" className=\"question\">\n            {currentQuestion}\n          </p>\n          <p className=\"fraction\">\n            {currentQuestionIndex + 1}/{numberOfQuestions}\n          </p>\n          <div data-testid=\"options\" className=\"options\">\n            {optionItem}\n          </div>\n          <div data-testid=\"buttons\" className=\"button-container\">\n            <button\n              data-testid=\"next-button\"\n              id=\"next-button\"\n              disabled={currentQuestionIndex + 1 === numberOfQuestions}\n              onClick={() => handleButtonClick()}>\n              Next\n            </button>\n            <Link data-testid=\"end-game\" to=\"/score\">\n              EndGame\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PlayContainer;\n","import React from \"react\";\nimport GoBackHome from \"./reusables/GoBackHome\";\nimport fail from \"../assets/fail.webp\";\n\nconst ErrorContainer = () => {\n  return (\n    <div data-testid=\"errorContainer\" id=\"error\">\n      <div className=\"error-section\">\n        <p className=\"error-message\">\n          Sorry! Something is wrong! <br /> Please contact with me so that I can\n          correct it <br /> irem.peker@gmx.de\n        </p>\n        <img className=\"fail-message\" src={fail} alt=\"fail\" />\n        <GoBackHome />\n      </div>\n    </div>\n  );\n};\n\nexport default ErrorContainer;\n","import React from \"react\";\nimport { useOutletContext } from \"react-router-dom\";\nimport GoBackHome from \"./reusables/GoBackHome\";\nimport celebrate from \"../assets/celebrate.webp\";\nimport tryAgain from \"../assets/try-again.webp\";\n\nconst EndGame = () => {\n  const { score, correctAnswers, wrongAnswers, numberOfQuestions } =\n    useOutletContext();\n\n  return (\n    <div id=\"end-game\">\n      <div className=\"endGame-section\">\n        <h1>Quiz is finished</h1>\n        <p className=\"title\">\n          Your score is{\" \"}\n          <span className={score >= 6 ? \"green\" : \"red\"}>{score}</span> out of{\" \"}\n          {numberOfQuestions}\n          <br /> You have answered {correctAnswers} questions correctly and\n          <br /> {wrongAnswers} questions wrong\n        </p>\n        <div className=\"end-game-wrapper\">\n          <h2 className=\"end-game-message\">\n            {score >= 6\n              ? \"CONGRATULATIONS! You did it!\"\n              : \"Next time you will do better!\"}\n          </h2>\n          <img\n            src={score >= 6 ? celebrate : tryAgain}\n            alt={score >= 6 ? \"Celebrate Giphy\" : \"Try Again Giphy\"}\n            className=\"end-game-giphy\"\n          />\n        </div>\n        <GoBackHome />\n      </div>\n    </div>\n  );\n};\n\nexport default EndGame;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport App from \"./components/App\";\nimport HomeContainer from \"./components/HomeContainer\";\nimport PlayContainer from \"./components/PlayContainer\";\nimport ErrorContainer from \"./components/ErrorContainer\";\nimport EndGame from \"./components/EndGame\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst router = createBrowserRouter(\n  [\n    {\n      path: \"/\",\n      element: <App />,\n      errorElement: <ErrorContainer />,\n      children: [\n        {\n          index: true,\n          element: <HomeContainer />,\n        },\n        {\n          path: \"play\",\n          element: <PlayContainer />,\n        },\n        {\n          path: \"score\",\n          element: <EndGame />,\n        },\n      ],\n    },\n  ],\n  {\n    basename: \"/quiz-app\",\n    future: {\n      v7_startTransition: true,\n      v7_relativeSplatPath: true,\n      v7_fetcherPersist: true,\n      v7_normalizeFormMethod: true,\n      v7_partialHydration: true,\n      v7_skipActionErrorRevalidation: true,\n    },\n  }\n);\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n  <React.StrictMode>\n    <RouterProvider router={router} />\n  </React.StrictMode>\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}